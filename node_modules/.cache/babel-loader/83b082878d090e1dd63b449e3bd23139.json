{"ast":null,"code":"var _jsxFileName = \"/Users/raghav/Desktop/Intern project Alfa/alfa-frontend/src/Leaderboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport './Leaderboard.css';\nimport { useTable, useSortBy, useGlobalFilter } from 'react-table';\nimport { COLUMNS } from './Columns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Leaderboard() {\n  _s();\n\n  const [studentData, setStudentData] = useState([]);\n  useEffect(() => {\n    fetch('/get_data').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setStudentData(data));\n  }, []);\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => studentData, [studentData]);\n  console.log(\"test\");\n  console.log(studentData);\n  const tableInstance = useTable({\n    columns,\n    data\n  }, useSortBy);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"leaderboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: column.isSorted ? column.isSortedDesc ? '  v' : '  ^' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 52\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Leaderboard, \"xxZBDuBF5/XjBvDRW84SYv9KbGo=\", false, function () {\n  return [useTable];\n});\n\n_c = Leaderboard;\nexport default Leaderboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"sources":["/Users/raghav/Desktop/Intern project Alfa/alfa-frontend/src/Leaderboard.js"],"names":["React","useEffect","useMemo","useState","useTable","useSortBy","useGlobalFilter","COLUMNS","Leaderboard","studentData","setStudentData","fetch","then","response","ok","json","data","columns","console","log","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,OAAO,mBAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,eAA9B,QAAqD,aAArD;AACA,SAASC,OAAT,QAAwB,WAAxB;;;AAGA,SAASC,WAAT,GAAuB;AAAA;;AAEnB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AAGAF,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,KAAK,CAAC,WAAD,CAAL,CAAmBC,IAAnB,CAAwBC,QAAQ,IAAI;AAChC,UAAGA,QAAQ,CAACC,EAAZ,EAAgB;AACZ,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;AACJ,KAJD,EAIGH,IAJH,CAIQI,IAAI,IAAIN,cAAc,CAACM,IAAD,CAJ9B;AAKH,GANQ,EAMN,EANM,CAAT;AAOA,QAAMC,OAAO,GAAGf,OAAO,CAAC,MAAMK,OAAP,EAAgB,EAAhB,CAAvB;AACA,QAAMS,IAAI,GAAGd,OAAO,CAAC,MAAMO,WAAP,EAAoB,CAACA,WAAD,CAApB,CAApB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYV,WAAZ;AAEA,QAAMW,aAAa,GAAGhB,QAAQ,CAAC;AAC3Ba,IAAAA,OAD2B;AAE3BD,IAAAA;AAF2B,GAAD,EAG3BX,SAH2B,CAA9B;AAKA,QAAM;AAAEgB,IAAAA,aAAF;AAAiBC,IAAAA,iBAAjB;AAAoCC,IAAAA,YAApC;AAAkDC,IAAAA,IAAlD;AAAwDC,IAAAA;AAAxD,MAAuEL,aAA7E;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,2BACI,sBAAWC,aAAa,EAAxB;AAAA,8BACI;AAAA,kBAEQE,YAAY,CAACG,GAAb,CAAiBC,WAAW,iBACxB,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,oBAEQD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAD,iBACpB,mBAAQA,MAAM,CAACC,cAAP,CAAsBD,MAAM,CAACE,oBAAP,EAAtB,CAAR;AAAA,uBAA+DF,MAAM,CAACG,MAAP,CAAc,QAAd,CAA/D,eACI;AAAA,wBAEQH,MAAM,CAACI,QAAP,GAAmBJ,MAAM,CAACK,YAAP,GAAsB,KAAtB,GAA8B,KAAjD,GAA2D;AAFnE;AAAA;AAAA;AAAA;AAAA,oBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,gBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,cADJ,eAoBI,sBAAWb,iBAAiB,EAA5B;AAAA,kBAEQE,IAAI,CAACE,GAAL,CAASU,GAAG,IAAI;AACZX,UAAAA,UAAU,CAACW,GAAD,CAAV;AACA,8BACI,mBAAQA,GAAG,CAACC,WAAJ,EAAR;AAAA,sBAEQD,GAAG,CAACE,KAAJ,CAAUZ,GAAV,CAAca,IAAI,IAAI;AAClB,kCAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,0BAA8BD,IAAI,CAACN,MAAL,CAAY,MAAZ;AAA9B;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH,aAFD;AAFR;AAAA;AAAA;AAAA;AAAA,kBADJ;AASH,SAXD;AAFR;AAAA;AAAA;AAAA;AAAA,cApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAyCH;;GAjEQzB,W;UAiBiBJ,Q;;;KAjBjBI,W;AAmET,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport './Leaderboard.css';\nimport { useTable, useSortBy, useGlobalFilter } from 'react-table';\nimport { COLUMNS } from './Columns';\n\n\nfunction Leaderboard() {\n\n    const [studentData, setStudentData] = useState([])\n    \n\n    useEffect(() => {\n        fetch('/get_data').then(response => {\n            if(response.ok) {\n                return response.json()\n            }\n        }).then(data => setStudentData(data))\n    }, [])\n    const columns = useMemo(() => COLUMNS, []);\n    const data = useMemo(() => studentData, [studentData]);\n    console.log(\"test\")\n    console.log(studentData)\n\n    const tableInstance = useTable({\n        columns,\n        data\n    }, useSortBy)\n\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance\n\n    return (\n        <div className=\"leaderboard\">\n            <table {...getTableProps()}>\n                <thead>\n                    {\n                        headerGroups.map(headerGroup => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {\n                                    headerGroup.headers.map((column) => (\n                                        <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render('Header')}\n                                            <span>\n                                                {\n                                                    column.isSorted ? (column.isSortedDesc ? '  v' : '  ^' ) : ''\n                                                }\n                                            </span>\n                                        </th>\n                                    ) )\n                                }\n                            </tr>\n                        ) )\n                    }\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {\n                        rows.map(row => {\n                            prepareRow(row)\n                            return (\n                                <tr {...row.getRowProps()}>\n                                    {\n                                        row.cells.map(cell => {\n                                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n                </table>\n        </div>\n    )\n}\n\nexport default Leaderboard;\n"]},"metadata":{},"sourceType":"module"}